/*  
    指针：特定类型数据在内存中的存储地址，即内存地址
    指针的实际应用是指针变量
    定义语法
        变量类型 * 指针变量名; //声明
        指针变量名 = 内存地址值; //赋值
    eg. 
        int num = 10;
        int * p;
        p = &num;//p是内存地址,*p是指针p指向的值
        也可以
        int * p = &num;
        声明时： *p表示变量p是指针变量；
        使用时： *p表示取指针p指向内存区域的数据
        &表示取变量内存地址（单目操作符）

    野指针：
        被声明但未被初始化赋值的指针会指向随机的内存空间
        可能会来带未知问题，分配的内存不一定是干净的
        因此需要初始化赋值来进行覆盖
    或者为了避免野指针，可以将指针设置为空指针：
        int * p = NULL;
        (or) int * p = nullptr;
    但是还是要尽快使用，主要可以用于延时赋值的场景下作为过渡使用

指针运算：对指针进行基础操作，适合操纵数组并配合做动态内存分配
    p+n p-n p++ p--
    char类型指针+1，地址+1（字节）
    int类型指针+1，地址+4
    double类型指针+1，地址+8
    指针+n（-n）即内存地址+（-）n*类型大小

动态内存分配：即程序员手动进行内存空间的分配、内存空间的释放等内存管理操作
eg. int nums[] = {1,2,3,4,...}在使用后，后续的程序没有任何作用了，所以它会一直占用内存空间
    在C++代码中，变量、数组等对象的创建是由C++自动分配内存的，称之为（自动）静态内存分配
    静态内存管理是不会进行内存空间的自动清理的（无垃圾回收机制）
    因此需要手动的管理内存，即手动分配，用完清理
    new运算符：分配内存
        new type
        new type[n]
    delet运算符：释放内存（只可以用于new运算符申请的内存区域）
        delete 指针
        delete[] 指针
    eg. 
        int *p = new int;
        *p = 10;
        cout << *p << endl;
        delete p;
    eg.
        int *p = new int[5];
        p[0] = 1;
        *p = 1;
        p[1] = 2;
        *(p+1) = 2;
        cout << p[0] << endl;
        cout << *(p+1) << endl;
        delete[] p;
*/
#include<iostream>
using namespace std;
int main()
{
    // int num = 10;
    // int * p; //这里仅表示p变量是一个指针变量（占8个字节）
    // p = &num; //p变量用来记录num的内存地址
    // cout << "num的原地址是" << p << endl;//输出内存地址
    // p++;
    // cout << "num的修改后的地址是" << p << endl;    
    // cout << *p << endl;//这里*用来取p指针指向内存区域的数据
    // //对内存进行操作
    // *p = 20;
    // cout << "更改过之后的num是" << num << endl;
    // int * f;
    // cout << "野指针变量f指向的地址是" << f << endl;
    // //数组操作
    // int v[]={1,2,3,4,5};
    // int * vp = v;//v记录v[0]的地址
    // cout << "数组第一个元素是：" << *vp << endl;
    // cout << "数组第一个元素是：" << v[0] << endl;
    // cout << "数组第二个元素是: " << *(vp+1) << endl;
    // cout << "数组第二个元素是：" << v[1] << endl;
    // * (vp+2) = 33;
    // cout << "数组第三个元素是：" << v[2] << endl;
    int *p = new int;
    *p = 10;
    cout << "new申请的4字节空间内存放的是:" << *p << endl;
    delete p;//只有指针需要管理
    int * p_arr = new int[5];
    //p_arr的地址就是数组空间内存区域开头位置
    p_arr[0] = 10;//等同于*(p_arr+1) = 10;
    p_arr[1] = 20;//等同于*(p_arr+1) = 20;
    cout << "数组第一个元素是：" << p_arr[0] << endl;
    delete[] p_arr;//建议写完new立刻去写delete
    return 0;
}