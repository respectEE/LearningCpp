C++程序在执行时，内存大方向可以分为4个区域
程序运行前：
    代码区： 存放函数体的二进制代码，由操作系统进行管理的
    全局区：存放全局变量和静态变量及常量
程序运行后：
    栈区：由编译器自动分配释放，存放函数的参数值，局部变量
    堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收
    代码区：
        共享的：对于频繁被执行的程序只需要内存中有一份代码即可
        只读的：防止程序意外的修改它的指令
    全局区：
        存放全局变量、静态变、常量
        全局区的数据在程序结束后由操作系统释放
        （函数体内的为局部变量，函数体外的为全局变量，还有静态变量“static”、“ any string”、“const”修饰常量、const修饰的全局变量也是放在全局区）
    栈区：由编译器自动分配释放，存放函数的参数值，局部变量
        note：栈区的数据在函数执行完后自动释放，因此不要返回局部变量的地址
            eg.
                int * func(){
                    int a = 10;//局部变量，存放在栈区
                    return &a;//此时函数结束后内存自动释放，因此无法返回地址
                }
    堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收
        主要利用new在堆中开辟内存
            eg.
                int * func(){
                    int * a = new int(10);//a指向常量10
                    return a;
                }

                int main()
                {
                    int * p = func();
                    cout << *p << endl;
                }